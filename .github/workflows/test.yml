# This is the main CI workflow that runs the test suite on all pushes to main and all pull requests.
# It runs the following jobs:
# - required: runs the test suite on ubuntu with stable and beta rust toolchains
# - minimal: runs the test suite with the minimal versions of the dependencies that satisfy the
#   requirements of this crate, and its dependencies
# - os-check: runs the test suite on mac and windows
# - coverage: runs the test suite and collects coverage information
# See check.yml for information about how the concurrency cancellation and workflow triggering works
permissions:
  contents: read
on:
  push:
    branches: [main]
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: test
jobs:
  coverage:
    # use llvm-cov to build and collect coverage and outputs in a format that is compatible with
    # codecov.io
    runs-on: ubuntu-latest
    name: ubuntu / stable / coverage
    env:
      TEST_CORE_DATABASE_URL: ${{ secrets.TEST_CORE_DATABASE_URL }}
      TEST_AUTH_DATABASE_URI: ${{ secrets.TEST_AUTH_DATABASE_URI }}
      TEST_AUTH_DATABASE_NAME: ${{ secrets.TEST_AUTH_DATABASE_NAME }}
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: setup postgres database
        run: docker-compose up -d
        env:
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          AUTH_MONGODB_USERNAME: ${{ secrets.AUTH_MONGODB_USERNAME }}
          AUTH_MONGODB_PASSWORD: ${{ secrets.AUTH_MONGODB_PASSWORD }}
          AUTH_MONGODB_PORT: ${{ secrets.AUTH_MONGODB_PASSWORD }}
      - name: install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features native-tls,postgres
      - name: run sqlx migrations
        run: cd database && sqlx migrate run --database-url "${{ secrets.TEST_CORE_DATABASE_URL }}"
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo llvm-cov
        run: cargo llvm-cov --locked --all-features --lcov --output-path lcov.info
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
