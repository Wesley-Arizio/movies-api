# Run scheduled (rolling) jobs on a nightly basis, as your crate may break independently of any
# given PR. E.g., updates to rust nightly and updates to this crates dependencies. See check.yml for
# information about how the concurrency cancellation and workflow triggering works
permissions:
  contents: read
on:
  push:
    branches: [main]
  pull_request:
  schedule:
    - cron:  '7 7 * * *'
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: rolling
jobs:
  # https://twitter.com/mycoliza/status/1571295690063753218
  nightly:
    runs-on: ubuntu-latest
    name: ubuntu / nightly
    env:
      TEST_CORE_DATABASE_URL: ${{ secrets.TEST_CORE_DATABASE_URL }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install nightly
        uses: dtolnay/rust-toolchain@nightly
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
      - name: Set up Docker
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            choco install docker-desktop -y
            docker --version
          else
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo usermod -aG docker $USER
            sudo systemctl start docker
            sudo systemctl enable docker
            docker --version
          fi

      - name: Set up Docker Compose
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
          Invoke-WebRequest -Uri https://github.com/docker/compose/releases/latest/download/docker-compose-Windows-x86_64.exe -OutFile docker-compose.exe
          Move-Item -Path docker-compose.exe -Destination "$env:ProgramFiles\Docker\docker-compose.exe"
          docker-compose --version
          else
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          fi
      - name: setup postgres database
        run: docker-compose up -d postgres
        env:
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          AUTH_MONGODB_USERNAME: ${{ secrets.AUTH_MONGODB_USERNAME }}
          AUTH_MONGODB_PASSWORD: ${{ secrets.AUTH_MONGODB_PASSWORD }}
          AUTH_MONGODB_PORT: ${{ secrets.AUTH_MONGODB_PASSWORD }}
      - name: install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features native-tls,postgres
      - name: run sqlx migrations
        run: cd database && sqlx migrate run --database-url "${{ secrets.TEST_CORE_DATABASE_URL }}"
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo test --locked
        run: cargo test --locked --all-features --all-targets
  # https://twitter.com/alcuadrado/status/1571291687837732873
  update:
    # This action checks that updating the dependencies of this crate to the latest available that
    # satisfy the versions in Cargo.toml does not break this crate. This is important as consumers
    # of this crate will generally use the latest available crates. This is subject to the standard
    # Cargo semver rules (i.e cargo does not update to a new major version unless explicitly told
    # to).
    runs-on: ubuntu-latest
    name: ubuntu / beta / updated
    env:
      TEST_CORE_DATABASE_URL: ${{ secrets.TEST_CORE_DATABASE_URL }}
    # There's no point running this if no Cargo.lock was checked in in the first place, since we'd
    # just redo what happened in the regular test job. Unfortunately, hashFiles only works in if on
    # steps, so we repeat it.
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install beta
        if: hashFiles('Cargo.lock') != ''
        uses: dtolnay/rust-toolchain@beta
      - name: cargo update
        if: hashFiles('Cargo.lock') != ''
        run: cargo update
      - name: Set up Docker
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            choco install docker-desktop -y
            docker --version
          else
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo usermod -aG docker $USER
            sudo systemctl start docker
            sudo systemctl enable docker
            docker --version
          fi

      - name: Set up Docker Compose
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
          Invoke-WebRequest -Uri https://github.com/docker/compose/releases/latest/download/docker-compose-Windows-x86_64.exe -OutFile docker-compose.exe
          Move-Item -Path docker-compose.exe -Destination "$env:ProgramFiles\Docker\docker-compose.exe"
          docker-compose --version
          else
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          fi
      - name: setup postgres database
        run: docker-compose up -d postgres
        env:
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          AUTH_MONGODB_USERNAME: ${{ secrets.AUTH_MONGODB_USERNAME }}
          AUTH_MONGODB_PASSWORD: ${{ secrets.AUTH_MONGODB_PASSWORD }}
          AUTH_MONGODB_PORT: ${{ secrets.AUTH_MONGODB_PASSWORD }}
      - name: install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features native-tls,postgres
      - name: run sqlx migrations
        run: cd database && sqlx migrate run --database-url "${{ secrets.TEST_CORE_DATABASE_URL }}"
      - name: cargo test
        if: hashFiles('Cargo.lock') != ''
        run: cargo test --locked --all-features --all-targets
        env:
          RUSTFLAGS: -D deprecated
